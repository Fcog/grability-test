package com.franciscogiraldo.fcog.grability.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.franciscogiraldo.fcog.grability.db.App;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP".
*/
public class AppDao extends AbstractDao<App, Long> {

    public static final String TABLENAME = "APP";

    /**
     * Properties of entity App.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Category = new Property(4, String.class, "category", false, "CATEGORY");
        public final static Property Link = new Property(5, String.class, "link", false, "LINK");
        public final static Property Price = new Property(6, Integer.class, "price", false, "PRICE");
        public final static Property Favorite = new Property(7, Integer.class, "favorite", false, "FAVORITE");
        public final static Property NewSync = new Property(8, Integer.class, "newSync", false, "NEW_SYNC");
    };


    public AppDao(DaoConfig config) {
        super(config);
    }
    
    public AppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"IMAGE\" TEXT," + // 2: image
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"CATEGORY\" TEXT," + // 4: category
                "\"LINK\" TEXT," + // 5: link
                "\"PRICE\" INTEGER," + // 6: price
                "\"FAVORITE\" INTEGER," + // 7: favorite
                "\"NEW_SYNC\" INTEGER);"); // 8: newSync
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, App entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(6, link);
        }
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(7, price);
        }
 
        Integer favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(8, favorite);
        }
 
        Integer newSync = entity.getNewSync();
        if (newSync != null) {
            stmt.bindLong(9, newSync);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public App readEntity(Cursor cursor, int offset) {
        App entity = new App( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // category
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // link
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // price
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // favorite
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // newSync
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, App entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategory(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLink(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFavorite(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNewSync(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(App entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(App entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
